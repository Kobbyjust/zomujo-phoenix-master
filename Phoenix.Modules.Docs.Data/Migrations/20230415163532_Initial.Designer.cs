// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Phoenix.Modules.Docs.Data;

#nullable disable

namespace Phoenix.Modules.Docs.Data.Migrations
{
    [DbContext(typeof(DocsDbContext))]
    [Migration("20230415163532_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OptionQuestion", b =>
                {
                    b.Property<string>("OptionsId")
                        .HasColumnType("text");

                    b.Property<string>("QuestionsId")
                        .HasColumnType("text");

                    b.HasKey("OptionsId", "QuestionsId");

                    b.HasIndex("QuestionsId");

                    b.ToTable("OptionQuestion");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Consultations.Consultation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Issues.DocsIssue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("DocsIssues", (string)null);
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Notifications.DocsNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DocsNotifications", (string)null);
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Payments.DocsPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("DocsPayments", (string)null);
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Prescriptions.Prescription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("MoreInfo")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar");

                    b.Property<string>("ReviewId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Questioning.Answer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("MoreInfo")
                        .HasColumnType("text");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("QuestionnaireId")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Questioning.Faq", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AnswerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("ServiceId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Faqs");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Questioning.Option", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("Reset")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Questioning.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Hint")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceId")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Questioning.Questionnaire", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("PaymentId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Questionnaires");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Reviews.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConsultationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<bool>("IsOrdered")
                        .HasColumnType("boolean");

                    b.Property<string>("QuestionnaireId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("ConsultationId");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Services.Service", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("ServiceCategoryId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Services.ServiceCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Sessions.Session", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AnonymousName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Answers")
                        .HasColumnType("text");

                    b.Property<string>("CounsellorId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<bool>("InProgress")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Rate")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Sessions.SessionMedia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("SessionMedium");
                });

            modelBuilder.Entity("Phoenix.Shared.Persistence.Outbox.OutboxMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOccurred")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateProcessed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DocsOutbox");
                });

            modelBuilder.Entity("OptionQuestion", b =>
                {
                    b.HasOne("Phoenix.Modules.Docs.Data.Questioning.Option", null)
                        .WithMany()
                        .HasForeignKey("OptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Phoenix.Modules.Docs.Data.Questioning.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Consultations.Consultation", b =>
                {
                    b.OwnsOne("Phoenix.Shared.Persistence.Audit", "Audit", b1 =>
                        {
                            b1.Property<string>("ConsultationId")
                                .HasColumnType("text");

                            b1.Property<DateTime>("CreatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 160, DateTimeKind.Utc).AddTicks(2294));

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 160, DateTimeKind.Utc).AddTicks(4399));

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.HasKey("ConsultationId");

                            b1.ToTable("Consultations");

                            b1.WithOwner()
                                .HasForeignKey("ConsultationId");
                        });

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Issues.DocsIssue", b =>
                {
                    b.OwnsOne("Phoenix.Shared.Persistence.Audit", "Audit", b1 =>
                        {
                            b1.Property<string>("DocsIssueId")
                                .HasColumnType("text");

                            b1.Property<DateTime>("CreatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 182, DateTimeKind.Utc).AddTicks(4391));

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 182, DateTimeKind.Utc).AddTicks(5918));

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.HasKey("DocsIssueId");

                            b1.ToTable("DocsIssues");

                            b1.WithOwner()
                                .HasForeignKey("DocsIssueId");
                        });

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Notifications.DocsNotification", b =>
                {
                    b.OwnsOne("Phoenix.Shared.Persistence.Audit", "Audit", b1 =>
                        {
                            b1.Property<string>("DocsNotificationId")
                                .HasColumnType("text");

                            b1.Property<DateTime>("CreatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 194, DateTimeKind.Utc).AddTicks(2915));

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 194, DateTimeKind.Utc).AddTicks(4657));

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.HasKey("DocsNotificationId");

                            b1.ToTable("DocsNotifications");

                            b1.WithOwner()
                                .HasForeignKey("DocsNotificationId");
                        });

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Payments.DocsPayment", b =>
                {
                    b.OwnsOne("Phoenix.Shared.Persistence.Audit", "Audit", b1 =>
                        {
                            b1.Property<string>("DocsPaymentId")
                                .HasColumnType("text");

                            b1.Property<DateTime>("CreatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 209, DateTimeKind.Utc).AddTicks(9400));

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 210, DateTimeKind.Utc).AddTicks(1875));

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.HasKey("DocsPaymentId");

                            b1.ToTable("DocsPayments");

                            b1.WithOwner()
                                .HasForeignKey("DocsPaymentId");
                        });

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Prescriptions.Prescription", b =>
                {
                    b.HasOne("Phoenix.Modules.Docs.Data.Reviews.Review", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("ReviewId");

                    b.OwnsMany("Phoenix.Modules.Docs.Data.Prescriptions.Drug", "Drugs", b1 =>
                        {
                            b1.Property<string>("PrescriptionId")
                                .HasColumnType("text");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PrescriptionId", "Id");

                            b1.ToTable("Drug");

                            b1.WithOwner()
                                .HasForeignKey("PrescriptionId");
                        });

                    b.OwnsOne("Phoenix.Shared.Persistence.Audit", "Audit", b1 =>
                        {
                            b1.Property<string>("PrescriptionId")
                                .HasColumnType("text");

                            b1.Property<DateTime>("CreatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 225, DateTimeKind.Utc).AddTicks(5608));

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 225, DateTimeKind.Utc).AddTicks(8147));

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.HasKey("PrescriptionId");

                            b1.ToTable("Prescriptions");

                            b1.WithOwner()
                                .HasForeignKey("PrescriptionId");
                        });

                    b.Navigation("Audit");

                    b.Navigation("Drugs");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Questioning.Answer", b =>
                {
                    b.HasOne("Phoenix.Modules.Docs.Data.Questioning.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Phoenix.Modules.Docs.Data.Questioning.Questionnaire", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionnaireId");

                    b.OwnsOne("Phoenix.Shared.Persistence.Audit", "Audit", b1 =>
                        {
                            b1.Property<string>("AnswerId")
                                .HasColumnType("text");

                            b1.Property<DateTime>("CreatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 244, DateTimeKind.Utc).AddTicks(8237));

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 245, DateTimeKind.Utc).AddTicks(1782));

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.HasKey("AnswerId");

                            b1.ToTable("Answers");

                            b1.WithOwner()
                                .HasForeignKey("AnswerId");
                        });

                    b.Navigation("Audit");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Questioning.Faq", b =>
                {
                    b.HasOne("Phoenix.Modules.Docs.Data.Questioning.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Phoenix.Modules.Docs.Data.Questioning.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Phoenix.Modules.Docs.Data.Services.Service", null)
                        .WithMany("Faqs")
                        .HasForeignKey("ServiceId");

                    b.OwnsOne("Phoenix.Shared.Persistence.Audit", "Audit", b1 =>
                        {
                            b1.Property<string>("FaqId")
                                .HasColumnType("text");

                            b1.Property<DateTime>("CreatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 281, DateTimeKind.Utc).AddTicks(8438));

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 282, DateTimeKind.Utc).AddTicks(1080));

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.HasKey("FaqId");

                            b1.ToTable("Faqs");

                            b1.WithOwner()
                                .HasForeignKey("FaqId");
                        });

                    b.Navigation("Answer");

                    b.Navigation("Audit");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Questioning.Option", b =>
                {
                    b.OwnsOne("Phoenix.Shared.Persistence.Audit", "Audit", b1 =>
                        {
                            b1.Property<string>("OptionId")
                                .HasColumnType("text");

                            b1.Property<DateTime>("CreatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 297, DateTimeKind.Utc).AddTicks(7075));

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 297, DateTimeKind.Utc).AddTicks(8757));

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.HasKey("OptionId");

                            b1.ToTable("Options");

                            b1.WithOwner()
                                .HasForeignKey("OptionId");
                        });

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Questioning.Question", b =>
                {
                    b.HasOne("Phoenix.Modules.Docs.Data.Services.Service", null)
                        .WithMany("Questions")
                        .HasForeignKey("ServiceId");

                    b.OwnsOne("Phoenix.Shared.Persistence.Audit", "Audit", b1 =>
                        {
                            b1.Property<string>("QuestionId")
                                .HasColumnType("text");

                            b1.Property<DateTime>("CreatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 316, DateTimeKind.Utc).AddTicks(2465));

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 316, DateTimeKind.Utc).AddTicks(4451));

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.HasKey("QuestionId");

                            b1.ToTable("Questions");

                            b1.WithOwner()
                                .HasForeignKey("QuestionId");
                        });

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Questioning.Questionnaire", b =>
                {
                    b.HasOne("Phoenix.Modules.Docs.Data.Payments.DocsPayment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.HasOne("Phoenix.Modules.Docs.Data.Services.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Phoenix.Shared.Persistence.Audit", "Audit", b1 =>
                        {
                            b1.Property<string>("QuestionnaireId")
                                .HasColumnType("text");

                            b1.Property<DateTime>("CreatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 332, DateTimeKind.Utc).AddTicks(709));

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 332, DateTimeKind.Utc).AddTicks(3945));

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.HasKey("QuestionnaireId");

                            b1.ToTable("Questionnaires");

                            b1.WithOwner()
                                .HasForeignKey("QuestionnaireId");
                        });

                    b.Navigation("Audit");

                    b.Navigation("Payment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Reviews.Review", b =>
                {
                    b.HasOne("Phoenix.Modules.Docs.Data.Consultations.Consultation", "Consultation")
                        .WithMany()
                        .HasForeignKey("ConsultationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Phoenix.Modules.Docs.Data.Questioning.Questionnaire", "Questionnaire")
                        .WithMany()
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Phoenix.Shared.Persistence.Audit", "Audit", b1 =>
                        {
                            b1.Property<string>("ReviewId")
                                .HasColumnType("text");

                            b1.Property<DateTime>("CreatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 349, DateTimeKind.Utc).AddTicks(3686));

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 349, DateTimeKind.Utc).AddTicks(6582));

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.HasKey("ReviewId");

                            b1.ToTable("Reviews");

                            b1.WithOwner()
                                .HasForeignKey("ReviewId");
                        });

                    b.Navigation("Audit");

                    b.Navigation("Consultation");

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Services.Service", b =>
                {
                    b.HasOne("Phoenix.Modules.Docs.Data.Services.ServiceCategory", "ServiceCategory")
                        .WithMany()
                        .HasForeignKey("ServiceCategoryId");

                    b.OwnsOne("Phoenix.Shared.Persistence.Audit", "Audit", b1 =>
                        {
                            b1.Property<string>("ServiceId")
                                .HasColumnType("text");

                            b1.Property<DateTime>("CreatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 379, DateTimeKind.Utc).AddTicks(8780));

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 380, DateTimeKind.Utc).AddTicks(670));

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.HasKey("ServiceId");

                            b1.ToTable("Services");

                            b1.WithOwner()
                                .HasForeignKey("ServiceId");
                        });

                    b.Navigation("Audit");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Services.ServiceCategory", b =>
                {
                    b.OwnsOne("Phoenix.Shared.Persistence.Audit", "Audit", b1 =>
                        {
                            b1.Property<string>("ServiceCategoryId")
                                .HasColumnType("text");

                            b1.Property<DateTime>("CreatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 364, DateTimeKind.Utc).AddTicks(9312));

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 365, DateTimeKind.Utc).AddTicks(1899));

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.HasKey("ServiceCategoryId");

                            b1.ToTable("ServiceCategories");

                            b1.WithOwner()
                                .HasForeignKey("ServiceCategoryId");
                        });

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Sessions.Session", b =>
                {
                    b.OwnsOne("Phoenix.Shared.Persistence.Audit", "Audit", b1 =>
                        {
                            b1.Property<string>("SessionId")
                                .HasColumnType("text");

                            b1.Property<DateTime>("CreatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 393, DateTimeKind.Utc).AddTicks(3552));

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 393, DateTimeKind.Utc).AddTicks(5814));

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.HasKey("SessionId");

                            b1.ToTable("Sessions");

                            b1.WithOwner()
                                .HasForeignKey("SessionId");
                        });

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Sessions.SessionMedia", b =>
                {
                    b.HasOne("Phoenix.Modules.Docs.Data.Sessions.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Phoenix.Shared.Persistence.Audit", "Audit", b1 =>
                        {
                            b1.Property<string>("SessionMediaId")
                                .HasColumnType("text");

                            b1.Property<DateTime>("CreatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 410, DateTimeKind.Utc).AddTicks(1441));

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTime(2023, 4, 15, 16, 35, 32, 410, DateTimeKind.Utc).AddTicks(3229));

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("admin");

                            b1.HasKey("SessionMediaId");

                            b1.ToTable("SessionMedium");

                            b1.WithOwner()
                                .HasForeignKey("SessionMediaId");
                        });

                    b.Navigation("Audit");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Questioning.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Questioning.Questionnaire", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Reviews.Review", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("Phoenix.Modules.Docs.Data.Services.Service", b =>
                {
                    b.Navigation("Faqs");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
